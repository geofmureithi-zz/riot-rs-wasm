<app>
    <script type="rust" module="book">
        use serde::{Serialize, Deserialize};

        #[derive(Serialize, Deserialize, Default)]
        pub struct Book {
            id: i32,
            title: String,
            price: i32,
            highlighted: bool,
            image: String, 
        }

        #[derive(Serialize, Deserialize)]
        pub struct BooksState {
            books: Vec<Book>
        }

        impl Default for BooksState {
            fn default() -> Self {
                BooksState {
                    books: vec![
                        Book {
                            id: 99,
                            title: String::from("A grain of wheat by Ngugi wa Thiong'o"),
                            price: 99,
                            highlighted: true,
                            image: String::from("https://images.unsplash.com/photo-1544947950-fa07a98d237f?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80")
                        }
                    ] 
                }
            }
        }


        #[allow(non_camel_case_types)]
        #[derive(Serialize, Deserialize)]
        pub enum BooksAction {
            add(Book),
            remove(i32),
            add_to_cart(i32),
        }
    
        fn books_reducer(state: BooksState, action: BooksAction) -> BooksState {
            match action {
                BooksAction::add(book) => {
                    let mut books = state.books;
                    books.push(book);
                    BooksState {
                        books
                    }
                },
                BooksAction::remove(id) => {
                    let mut books = state.books;
                    for i in (0..books.len()).rev() {
                        if books[i].id == id {
                            books.swap_remove(i);
                        }
                    }
                    let message = format!("Book with id {} successfully deleted! ", id);
                    let result = js! {
                        alert( @{message} );
                    };
                    BooksState {
                        books
                    }
                },
                BooksAction::add_to_cart(id) => {
                    let message = format!("Adding book with id {} to cart! ", id);
                    let result = js! {
                        alert( @{message} );
                    };
                    state
                }
            }
        }
        export!(books_state, books_dispatch, books_reducer, BooksState, BooksAction);
    </script>
    <main class="my-8">
        <div class="container mx-auto px-6">
            <h3 class="text-gray-700 text-2xl font-medium">Books As a service</h3>
            <span class="mt-3 text-sm text-gray-500">200+ Products</span>
            <button class="float-right shadow-md font-medium mx-2 py-2 px-4 text-yellow-100
                cursor-pointer bg-green-600 rounded text-lg tr-mt"onclick={() =>add({
                    id: Math.floor(Math.random() * 200),
                    title: "A grain of wheat by Ngugi wa Thiong'o",
                    price: Math.floor(Math.random() * 200),
                    highlighted: false,
                    image: "https://images.unsplash.com/photo-1510172951991-856a654063f9?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80", 
                })}>Add New Book</button>
            <div class="grid gap-6 grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 mt-6">
                <div each={book in state.books} class="w-full max-w-sm mx-auto rounded-md shadow-md overflow-hidden">
                    <div class="flex items-end justify-end h-56 w-full bg-cover" style="background-image: url('{book.image}')">
                        <button onclick={()=> add_to_cart(book.id)} class="p-2 rounded-full bg-blue-600 text-white mx-5 -mb-4 hover:bg-blue-500 focus:outline-none focus:bg-blue-500">
                            <svg class="h-5 w-5" fill="{book.highlighted?'green':'none'}" stroke-linecap="round" stroke-linejoin="round" stroke-width="2" viewBox="0 0 24 24" stroke="currentColor"><path d="M3 3h2l.4 2M7 13h10l4-8H5.4M7 13L5.4 5M7 13l-2.293 2.293c-.63.63-.184 1.707.707 1.707H17m0 0a2 2 0 100 4 2 2 0 000-4zm-8 2a2 2 0 11-4 0 2 2 0 014 0z"></path></svg>
                        </button>
                        <button onclick={()=> remove(book.id)} class="p-2 rounded-full bg-blue-600 text-white mx-5 -mb-4 hover:bg-blue-500 focus:outline-none focus:bg-blue-500">
                            <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">
                             <path fill="currentcolor" d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12 19 6.41z"/>
                            </svg>
                        </button>
                    </div>
                    <div class="px-5 py-3">
                        <h3 class="text-gray-700 uppercase">{book.title}</h3>
                        <span class="text-gray-500 mt-2">${book.price} | ID: {book.id}</span>
                    </div>
                </div>
            </div>
        </div>
    </main>
</app>