<app>
    <script type="rust" module="counter">
        use serde::{Serialize, Deserialize};

        #[derive(Serialize, Deserialize, Default)]
        pub struct CounterState {
            counter: i32
        }

        #[derive(Serialize, Deserialize)]
        pub enum CounterAction {
            increment,
            decrement
            double,
        }

        fn reducer(state: &CounterState, action: &CounterAction) -> CounterState {
            match action {
                CounterAction::increment => CounterState {
                    counter: state.counter + 1
                },
                CounterAction::decrement => CounterState {
                    counter: state.counter - 1
                },
                CounterAction::double => CounterState {
                    counter: state.counter * 2
                }
            }
        }

        pub fn dispatch(state: &CounterState, action: &CounterAction) -> &CounterState {
            reducer(state, action)
        }

        export!(CounterState, CounterAction, dispatch)
    </script>
  <p>{ state.counter }</p>
  <button onclick={increment}>Add +</button>
  <button onclick={decrement}>Subtract -</button>
</app>