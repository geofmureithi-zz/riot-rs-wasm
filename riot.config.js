const { registerPreprocessor } = require('@riotjs/compiler')
const fs = require('fs');

// register the pug preprocessor
registerPreprocessor('javascript', 'rust', (code, options) => {
  const javascript = options.fragments.javascript
  const { attributes, text } = javascript
  const rustCode = text.text
  const module = attributes.find(a => a.name=='module').value
  writeModuleToFile(module, rustCode)  
  return {
    code : `
    import lib from '../Cargo.toml'
    const state = lib.store_state
    const dispatch = lib.store_dispatch
        export default {
            increment(){
                this.update(dispatch(this.state, 'Increment'))
            },
            decrement(){
                this.update(dispatch(this.state, 'Decrement'))
            },
            onMounted(){
                this.update(state())
            }
        }
    `
  }
})

module.exports = {
  javascript: 'rs'
} 

function writeModuleToFile(module, code) {
    const stream = fs.createWriteStream(`src/autogenerated/${module}.rs`);
    stream.once('open', function(fd) {
        stream.write(code);
        stream.end();
    });
}
function appendModuleToLib(module) {
    const stream = fs.createWriteStream(`src/autogenerated/mod.rs`, {flags: 'a'});
    stream.once('open', function(fd) {
        stream.write(`\nmod ${module};`);
        stream.end();
    });
}


